---
title: "Improvement of chromVAR by TMM normalization - real data"
author: "Jiayi Wang"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
    toc_float: true

output:
  quarto::quarto_html:
    output_dir: "../docs/"
---

## Dependencies
```{r set up, message=FALSE, warning=FALSE}
suppressPackageStartupMessages({
    library(chromVAR)
    library(motifmatchr)
    library(Matrix)
    library(SummarizedExperiment)
    library(BiocParallel)
    library(BSgenome.Hsapiens.UCSC.hg38)
    library(BSgenome.Mmusculus.UCSC.mm10)
    library(ggplot2)
    library(JASPAR2016)
    library(pheatmap)
    library(patchwork)
    library(limma)
    library(stringr)
    library(ggpubr)
    source("utils.R")
})
set.seed(2017)

```

## Load real data
```{r data}
files <- list.files("../data/02_dat", "*.rds", full.names = TRUE)
dat <- lapply(files, readRDS)
name <- unlist(lapply(files, 
    \(.) substr(basename(.), 1, nchar(basename(.)) - 4)))
names(dat) <- name
```

## Standard chromVAR workflow

### Get deviations
```{r chromVAR, warning=FALSE}
Hmotifs <- getNonRedundantMotifs(format = "PFMatrix", species = "Hsapiens") 
Mmotifs <- getNonRedundantMotifs(format = "PFMatrix", species = "Mmusculus")
# old_devs <- lapply(names(dat), \(x) {
#   d <- dat[[x]]
#   seqlevelsStyle(d) <- "UCSC" 
#   message(x)
#   tryCatch(
#   {
#     .chromVAR_bulk(d, Hmotifs, BSgenome.Hsapiens.UCSC.hg38)
#   },
#   error = function(e) {
#     cat("trying BSgenome.Mmusculus.UCSC.mm10...\n")
#     .chromVAR_bulk(d, Mmotifs, BSgenome.Mmusculus.UCSC.mm10)
#   })
# })
# 
# names(old_devs) <- name
# saveRDS(old_devs, "../result/02_dat/old_devs.rds")
old_devs <- readRDS("../result/02_dat/old_devs.rds")
```

### Differential analysis of deviations between conditions
```{r limma, message=FALSE, warning=FALSE}
# old_limma <- lapply(old_devs, \(dev) {
#     colData(dev)$group_id <- substr(colnames(dev), 1, nchar(colnames(dev)) - 5)
#     design <- model.matrix(~ dev$group_id)
#     fit <- eBayes(lmFit(assays(dev)$z, design))
#     res <- topTable(fit, n = Inf)
#     ids <- match(rownames(res), rownames(dev))
#     res$name <- rowData(dev)$name[ids]
#     res$rank <- rank(res$P.Value)
#     res
# })
# names(old_limma) <- name
# saveRDS(old_limma, "../result/02_dat/old_limma.rds")
old_limma <- readRDS("../result/02_dat/old_limma.rds")
old_rank <- lapply(names(old_limma), \(e) {
  x <- old_limma[[e]]
  #r <- x[str_detect(rownames(x), e), "rank"]
  r <- x[x$name == e, "rank"]
  if (length(r) == 0) r <- 0
  data.frame(rank = r, motif = e, method = "old")
})

old_rank <- do.call(rbind, old_rank)
```

## New method with TMM normalization

### New deviations
```{r new chromVAR}
devtools::load_all("../../chromVAR/")
source("utils.R")
# new_devs <- lapply(names(dat), \(x) {
#   d <- dat[[x]]
#   seqlevelsStyle(d) <- "UCSC" 
#   message(x)
#   tryCatch(
#   {
#     .chromVAR_bulk(d, Hmotifs, BSgenome.Hsapiens.UCSC.hg38)
#   },
#   error = function(e) {
#     cat("trying BSgenome.Mmusculus.UCSC.mm10...\n")
#     .chromVAR_bulk(d, Mmotifs, BSgenome.Mmusculus.UCSC.mm10)
#   })
# })
# names(new_devs) <- name
# saveRDS(new_devs, "../result/02_dat/new_devs.rds")
new_devs <- readRDS("../result/02_dat/new_devs.rds")
```

### Differential analysis of new deviations
```{r new limma, warning=FALSE, message=FALSE}
# new_limma <- lapply(new_devs, \(dev) {
#     colData(dev)$group_id <- substr(colnames(dev), 1, nchar(colnames(dev)) - 5)
#     design <- model.matrix(~ dev$group_id)
#     fit <- eBayes(lmFit(assays(dev)$z, design))
#     res <- topTable(fit, n = Inf)
#     ids <- match(rownames(res), rownames(dev))
#     res$name <- rowData(dev)$name[ids]
#     res$rank <- rank(res$P.Value)
#     res
# })
# names(new_limma) <- name
# saveRDS(new_limma, "../result/02_dat/new_limma.rds")
new_limma <- readRDS("../result/02_dat/new_limma.rds")
```

### new rank
```{r new rank}
new_rank <- lapply(names(new_limma), \(e) {
  x <- new_limma[[e]]
  #r <- x[str_detect(rownames(x), e), "rank"]
  r <- x[x$name == e, "rank"]
  if (length(r) == 0) r <- 0
  data.frame(rank = r, motif = e, method = "new")
})

new_rank <- do.call(rbind, new_rank)
```


## Result evaluation and visualization

### Rank comparison
```{r}
rank <- rbind(old_rank, new_rank)
rank <- rank[rank$rank != 0, ]
validMotif <- unique(rank$motif)
ggplot(rank, aes(x = method, y = rank, fill = method)) +
  geom_bar(stat = "identity", color = "black", position = position_dodge()) +
  theme_minimal() + 
  scale_fill_brewer(palette = "Blues") +
  facet_wrap(~ motif, ncol = 4, labeller = \(.) label_both(.), scales="free")

```

### Distribution of z-scores

::: {.panel-tabset}

### Old: standard chromVAR
```{r z-dist old, fig.height=15, fig.width=10}
lapply(names(old_devs), \(x) {
    dev <- old_devs[[x]]
    ggplot(sechm::meltSE(dev, row.names(dev)), aes(z, colour = sample)) +
        geom_density() + ggtitle(paste0("Motif: ", x))
})  |>  wrap_plots(ncol = 2) 

```

### New: TMM normalization
```{r z-dist new, fig.height=15, fig.width=10}
lapply(names(new_devs), \(x) {
    dev <- new_devs[[x]]
    ggplot(sechm::meltSE(dev, row.names(dev)), aes(z, colour = sample)) +
        geom_density() + ggtitle(paste0(
            "Motif: ", x))
})  |>  wrap_plots(ncol = 2) 

```

:::

### logFC of limma results

```{r lfc, fig.height=6, fig.width=12}
lfc <- lapply(names(old_limma), \(x) {
    old <- data.frame(old_limma[[x]], motif = x, method = "old")
    new <- data.frame(new_limma[[x]], motif = x, method = "new")
    rbind(old, new)
})
lfc <- do.call(rbind, lfc)
```

::: {.panel-tabset}
### Histogram
```{r lfc histo, fig.height=15, fig.width=10}
ggplot(lfc, aes(x = logFC, col = method)) + 
    geom_histogram(aes(y = after_stat(density)),      
        fill = "white",
        bins = 100,
        alpha = 0.2) +
    geom_density() + 
    facet_grid(motif ~ method, scales = "free")
```

### Violin plot
```{r violin}
ggplot(lfc, aes(x = factor(motif), y = logFC, fill = method)) +
  geom_violin(alpha = 0.5) +
  geom_boxplot(width = 0.2, position = position_dodge(0.9), alpha = 0.4) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

::: 

### MA plot

::: {.panel-tabset}

### New method
```{r MA new, fig.height=15, fig.width=20}
colnames(lfc)[c(1,2,5)] <- c("log2FoldChange", "baseMeanLog2", "padj")
nlfc <- lfc[lfc$method == "new",]
olfc <- lfc[lfc$method == "old",]
lapply(unique(nlfc$motif), \(x) {
  df <- nlfc[nlfc$motif == x,]
  ggmaplot(df, dr = 0.05, fc = 2, size = 0.4,
     palette = c("#B31B21", "#1465AC", "darkgray"),
     genenames = as.vector(df$name),
     legend = "top", top = 20,
     font.label = c("bold", 11),
     font.legend = "bold",
     font.main = "bold",
     ggtheme = ggplot2::theme_minimal()) + ggtitle(x)
})  |>  wrap_plots(ncol = 4) 

```

### Old
```{r MA old, fig.height=15, fig.width=20}
lapply(unique(olfc$motif), \(x) {
  df <- olfc[olfc$motif == x,]
  ggmaplot(df, dr = 0.05, fc = 2, size = 0.4,
     palette = c("#B31B21", "#1465AC", "darkgray"),
     genenames = as.vector(df$name),
     legend = "top", top = 20,
     font.label = c("bold", 11),
     font.legend = "bold",
     font.main = "bold",
     ggtheme = ggplot2::theme_minimal()) + ggtitle(x)
})  |>  wrap_plots(ncol = 4) 
```


:::
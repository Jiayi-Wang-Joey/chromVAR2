---
title: "Improvement of chromVAR by TMM normalization - simulated data"
author: "Jiayi Wang"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
    toc_float: true

output:
  quarto::quarto_html:
    output_dir: "../docs/"
---

## Dependencies
```{r set up, message=FALSE, warning=FALSE}
suppressPackageStartupMessages({
    library(chromVAR)
    library(motifmatchr)
    library(Matrix)
    library(SummarizedExperiment)
    library(BiocParallel)
    library(BSgenome.Hsapiens.UCSC.hg38)
    library(ggplot2)
    library(JASPAR2016)
    library(pheatmap)
    library(patchwork)
    library(limma)
    library(stringr)
    library(data.table)
    library(ggpubr)
    library(csaw)
    source("utils.R")
})
set.seed(2017)

```

## Load simulated data
```{r data}
files <- list.files("../data/01_sim", "*CEBPB.rds", full.names = TRUE)
sims <- lapply(files, \(.) {
  x <- readRDS(.)
  x$totals <- colSums(counts(x))
  x <- normOffsets(x)
  assay(x, "ori_counts") <- assay(x, "counts")
  assay(x, "counts") <- assay(x, "offset")
  x
})
names(sims) <- c("0", "025", "05", "1", "3")

```


## Standard chromVAR workflow 

### Get deviations
```{r chromVAR sim}
motifs <- getNonRedundantMotifs(format = "PFMatrix", species = "Hsapiens")
old_devs <- lapply(sims, .chromVAR_bulk, 
    motifs, 
    BSgenome.Hsapiens.UCSC.hg38,
    TRUE)
names(old_devs) <- names(sims)
saveRDS(old_devs, "../result/01_sim/old_devs.rds")
old_devs <- readRDS("../result/01_sim/old_devs.rds")
```

### Differential analysis of deviations between conditions
```{r limma, message = FALSE}

old_res <- lapply(old_devs, \(dev) {
    colData(dev)$group_id <- substr(colnames(dev), 1, nchar(colnames(dev)) - 5)
    design <- model.matrix(~ dev$group_id)
    fit <- eBayes(lmFit(assays(dev)$z, design))
    res <- topTable(fit, n = Inf)
    ids <- match(rownames(res), rownames(dev))
    res$name <- rowData(dev)$name[ids]
    res$rank <- rank(res$P.Value)
    res
})
names(old_res) <- names(old_devs)
```


## edgeR TMM normalization 
```{r new normalization, message = FALSE}
devtools::load_all("../../chromVAR/")
source("utils.R")
new_devs <-  lapply(sims, 
    .chromVAR_bulk, 
    motifs, 
    BSgenome.Hsapiens.UCSC.hg38,
    TRUE)
names(new_devs) <- names(sims)
saveRDS(new_devs, "../result/01_sim/new_devs.rds")
new_devs <- readRDS("../result/01_sim/new_devs.rds")
new_res <- lapply(new_devs, \(dev) {
    colData(dev)$group_id <- substr(colnames(dev), 1, nchar(colnames(dev)) - 5)
    design <- model.matrix(~ dev$group_id)
    fit <- eBayes(lmFit(assays(dev)$z, design))
    res <- topTable(fit, n = Inf)
    ids <- match(rownames(res), rownames(dev))
    res$name <- rowData(dev)$name[ids]
    res$rank <- rank(res$P.Value)
    res
})
names(new_res) <- names(new_devs)
```

## Comparisons of results before and after the TMM normalization

### Rank of CEBPB
```{r new rank, message = FALSE, fig.height=6, fig.width=8}
new_rank <- lapply(names(new_res), \(e) {
    x <- new_res[[e]]
    x$chip <- addChIP(rownames(x))
    r <- x[str_detect(x$name, "CEBPB"),]
    data.frame(rank = r$rank, effect = e, 
      method = "new", chip = r$chip,
      name = r$name)
})
new_rank <- do.call(rbind, new_rank)

old_rank <- lapply(names(old_res), \(e) {
    x <- old_res[[e]]
    x$chip <- addChIP(rownames(x))
    r <- x[str_detect(x$name, "CEBPB"),]
    data.frame(rank = r$rank, effect = e, 
      method = "old", chip = r$chip,
      name = r$name)
})
old_rank <- do.call(rbind, old_rank)

rank <- rbind(new_rank, old_rank)

ggplot(rank, aes(x = effect, y = sqrt(rank), group = method,
    label = sqrt(rank), color = method)) +
    geom_line(linetype = "dashed") +
    geom_point() +
    geom_label(fill = "white", alpha = 0.4) + 
    facet_grid(method ~ chip, scales = "free") 
```

### Distribution of z-scores

::: {.panel-tabset}

### Old: standard chromVAR 
```{r z-dist old, fig.height=15, fig.width=10}
lapply(names(old_devs), \(x) {
    dev <- old_devs[[x]]
    df <- sechm::meltSE(dev, row.names(dev))
    df$chip <- addChIP(df$feature)
    ggplot(df, aes(z, colour = sample)) +
        geom_density() + ggtitle(paste0("Effect: ", x)) + 
        facet_grid(~ chip)
})  |>  wrap_plots(ncol = 1) +  plot_layout(guides = "collect")
```

### New: TMM normalization
```{r z-dist new, fig.height=15, fig.width=10}
lapply(names(new_devs), \(x) {
    dev <- new_devs[[x]]
    df <- sechm::meltSE(dev, row.names(dev))
    df$chip <- addChIP(df$feature)
    ggplot(df, aes(z, colour = sample)) +
        geom_density() + ggtitle(paste0("Effect: ", x)) + 
        facet_grid(~ chip)
})  |>  wrap_plots(ncol = 1) +  plot_layout(guides = "collect")
```

:::

### logFC of limma results

```{r lfc, fig.height=6, fig.width=12}
lfc <- lapply(names(old_res), \(x) {
    old <- data.frame(old_res[[x]], effect = x, method = "old")
    new <- data.frame(new_res[[x]], effect = x, method = "new")
    rbind(old, new)
})
lfc <- do.call(rbind, lfc)
lfc$chip <- addChIP(rownames(lfc))
```

### Distribution of logFC and p-val
::: {.panel-tabset}

### logFC
```{r lfc histo, fig.height=6, fig.width=15}
ggplot(lfc, aes(x = logFC, col = chip)) + 
    geom_histogram(aes(y = after_stat(density)),      
        fill = "white",
        bins = 30,
        alpha = 0.2) +
    geom_density(alpha = 0.2) + 
    facet_grid(method ~ effect)
```

### p-val
```{r p-val histo, fig.height=6, fig.width=15}
ggplot(lfc, aes(x = P.Value, col = chip)) + 
    geom_histogram(aes(y = after_stat(density)),      
        fill = "white",
        bins = 30,
        alpha = 0.2) +
    geom_density(alpha = 0.2) + 
    facet_grid(method ~ effect)
```



::: 

### Violin plot
```{r}
lfc <- lapply(names(old_res), \(x) {
    new <- data.frame(new_res[[x]],  method = "new")
    old <- data.frame(old_res[[x]],  method = "old")
    new$chip <- addChIP(rownames(new))
    old$chip <- addChIP(rownames(old))
    df <- rbind(new, old)
    df$effect <- x
    df
}) 
lfc <- do.call(rbind, lfc)
```

```{r violin, fig.height=8, fig.width=10}
ggplot(lfc, aes(x = factor(chip), y = logFC, fill = method)) +
  geom_violin(alpha = 0.5) +
  geom_boxplot(width = 0.2, position = position_dodge(0.9), alpha = 0.4) +
  scale_fill_brewer(palette = "Blues") +
  facet_wrap(~ effect, ncol = 3, labeller = \(.) label_both(.), scales="free") +
  xlab("ChIP-seq overlaps")
```

### MA plot


::: {.panel-tabset}
### old
```{r ma, fig.height=10, fig.width=15}
colnames(lfc)[c(1,2,5)] <- c("log2FoldChange", "baseMeanLog2", "padj")
nlfc <- lfc[lfc$method == "new",]
olfc <- lfc[lfc$method == "old",]
lapply(unique(nlfc$effect), \(x) {
  df <- nlfc[nlfc$effect == x,]
  ggmaplot(df, dr = 0.05, fc = 2, size = 0.4,
     palette = c("#B31B21", "#1465AC", "darkgray"),
     genenames = as.vector(df$name),
     legend = "top", top = 20,
     font.label = c("bold", 11),
     font.legend = "bold",
     font.main = "bold",
     ggtheme = ggplot2::theme_minimal()) + ggtitle(paste0("Effect: ", x))
})  |>  wrap_plots(ncol = 3) 
```
### new
```{r ma new, fig.height=10, fig.width=15} 
lapply(unique(olfc$effect), \(x) {
  df <- olfc[olfc$effect == x,]
  ggmaplot(df, dr = 0.05, fc = 2, size = 0.4,
     palette = c("#B31B21", "#1465AC", "darkgray"),
     genenames = as.vector(df$name),
     legend = "top", top = 20,
     font.label = c("bold", 11),
     font.legend = "bold",
     font.main = "bold",
     ggtheme = ggplot2::theme_minimal()) + ggtitle(paste0("Effect: ", x))
})  |>  wrap_plots(ncol = 3) 
```

:::


